// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package database

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users(name, phone_number)
VALUES ($1, $2) RETURNING id,
    name,
    phone_number,
    otp,
    otp_expiration_time
`

type CreateUserParams struct {
	Name        string `json:"name" binding:"required"`
	PhoneNumber string `json:"phoneNumber" binding:"required"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.PhoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT
    id,
    name,
    phone_number,
    otp,
    otp_expiration_time
FROM users
WHERE phone_number = $1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
	)
	return i, err
}

const updateOTP = `-- name: UpdateOTP :exec
UPDATE users
SET
    otp = $1,
    otp_expiration_time = $2
WHERE phone_number = $3
`

type UpdateOTPParams struct {
	PhoneNumber string `json:"phoneNumber" binding:"required"`
}

func (q *Queries) UpdateOTP(ctx context.Context, arg UpdateOTPParams, otp string, otpExpirationTime time.Time) error {
	_, err := q.db.ExecContext(ctx, updateOTP, otp, otpExpirationTime, arg.PhoneNumber)
	return err
}

const verifyOTP = `-- name: VerifyOTP :one
SELECT id
FROM users
WHERE
    phone_number = $1
    AND otp = $2
    AND otp_expiration_time > NOW()
`

type VerifyOTPParams struct {
	PhoneNumber string `json:"phoneNumber" binding:"required"`
	Otp         string `json:"otp" binding:"required"`
}

func (q *Queries) VerifyOTP(ctx context.Context, arg VerifyOTPParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, verifyOTP, arg.PhoneNumber, arg.Otp)
	var id int32
	err := row.Scan(&id)
	return id, err
}
